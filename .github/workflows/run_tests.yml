name: Run tests

on:
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout Source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Create Firebase Google Services JSON File
        env:
          FIREBASE_GOOGLE_SERVICES: ${{ secrets.FIREBASE_GOOGLE_SERVICES }}
        run: echo $FIREBASE_GOOGLE_SERVICES | base64 -di > ./app/google-services.json

      - name: Copy CI gradle.properties
        run: mkdir -p ~/.gradle && cp .github/ci-gradle.properties ~/.gradle/gradle.properties

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Build project and compile debug test
        env:
          BASE_URL_Y: ${{ secrets.BASE_URL_Y }}
          BASE_URL_T: ${{ secrets.BASE_URL_T }}
          BASE_URL_I: ${{ secrets.BASE_URL_I }}
          HEADER_T: ${{ secrets.HEADER_T }}
          HEADER_I: ${{ secrets.HEADER_I }}
          FIREBASE_ENTITY: ${{ secrets.FIREBASE_ENTITY }}
        run: ./gradlew assembleDebug compileDebugUnitTestKotlin

      - name: Spotless
        # Spotless is not gradle configuration cache compliant. To allow the rest of the build
        # comply, run spotless with a gradle init script and disable the cache.
        run: ./gradlew spotlessCheck --init-script gradle/init.gradle.kts --no-configuration-cache

      - name: Run debug test
        run: ./gradlew testDebugUnitTest

      - name: Compile Android test
        run: ./gradlew compileDebugAndroidTestKotlin

      - name: Enable KVM group perms
        # https://github.blog/changelog/2023-02-23-hardware-accelerated-android-virtualization-on-actions-windows-and-linux-larger-hosted-runners/
        # Starting on February 23, 2023, Actions users of GitHub-hosted larger Linux runners will be able to make use of hardware acceleration for Android testing
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Run instrumentation tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          emulator-boot-timeout: 300
          disable-animations: true
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          script: ./gradlew connectedDebugAndroidTest

      - name: Upload build reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-reports
          path: app/build/reports/

      - name: Upload all outputs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: outputs
          path: app/build/outputs/